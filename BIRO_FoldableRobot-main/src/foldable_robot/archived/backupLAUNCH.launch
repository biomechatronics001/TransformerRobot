<?xml	version="1.0" encoding="UTF-8"?>
<launch>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="worlds/mud.world"/> <--> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
        <arg name="paused" value="true"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <!-- Spawn a robot into Gazebo -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find foldable_robot)/urdf/eight_cubes.urdf -urdf -z 1 -model eight_cubes" />

    <!--========== Launch Files and TF transforms ==============-->
    <!-- load the controllers -->
    <rosparam file="$(find foldable_robot)/config/config.yaml" command="load"/>
    <node name="controller_spawner" pkg ="controller_manager" type="spawner" ns="/simple_model" args="base_to_second_joint_position_controller joint_state_controller --shutdown-timeout 3"/>
    <!-- converts joint states to TF transforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <remap from="joint_state" to="/simple_model/joint_states" />
    </node>

    <!--========== URDF Plugin and Transmission ==============-->
    <!-- ROS Control plugin for Gazebo -->
    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <robotNamespace>/simple_model</robotNamespace>
      </plugin>
    </gazebo>

    <!-- transmission -->
    <transmission name="cube7_to_1">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="motor1">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="joint7">
        <hardwareInterface>EffortJointInterface</hardwareInterface>
      </joint>
    </transmission>

    <!--========== Maybe important ==============-->
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find foldable_robot)/config/config.yaml" command="load"/>

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
      output="screen" ns="/foldable_robot" args="joint1_position_controller joint_state_controller"/>

    <!-- converts joint states to TF transforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
      respawn="false" output="screen">
      <remap from="/joint_states" to="/foldable_robot/joint_states" />
    </node>

    <!-- Key board Teleop Misc Python Code for Testing -->
    def initialize():
        rate = rospy.Rate(50)
        print("Starting up keyboard interpreter. Press Ctrl-C to exit...")

        while not rospy.is_shutdown():
            key_pub = rospy.Publisher('joint1_position_controller/command', Float64, queue_size=1)
            rospy.Subscriber('keys', String, key_interpreter, key_pub)
            rate.sleep()

    if __name__ == '__main__':
        rospy.init_node("keyboard_interpreter")
        try:
            initialize()
        except rospy.ROSInterruptException:
            pass

</launch>
